// Generated file. DO NOT EDIT.
// This file is automatically generated by the 'generate_control_table.py' script.
// Any changes made to this file will be overwritten.

#pragma once

#include "ControlUnit.h" // Defines InstructionInfo
#include <cstdint>
#include <vector>

namespace riscv_sim {

/*
 * Control Word Layout
 * ---------------------
 * Define la posición de los bits para cada señal de control en la palabra de control. Esto es para documentación y para un uso futuro en la generación de la lógica de control.
 */
namespace ControlWord {
    // Escritura en la memoria de datos
    constexpr int MemWr_pos = 2;
    constexpr int MemWr_width = 1;
    // Escritura en el banco de registros
    constexpr int BRwr_pos = 3;
    constexpr int BRwr_width = 1;
    // Selector de fuente para la ALU (Registro vs Inmediato)
    constexpr int ALUsrc_pos = 4;
    constexpr int ALUsrc_width = 1;
    // Selector de fuente para el PC (PC+4, ALU, etc.)
    constexpr int PCsrc_pos = 6;
    constexpr int PCsrc_width = 2;
    // Selector de fuente del inmediato
    constexpr int ImmSrc_pos = 8;
    constexpr int ImmSrc_width = 3;
    // Fuente del resultado para la escritura en registro (ALU vs Mem)
    constexpr int ResSrc_pos = 11;
    constexpr int ResSrc_width = 2;
    // Señal de control de la ALU
    constexpr int ALUctr_pos = 13;
    constexpr int ALUctr_width = 3;
} // namespace ControlWord

// Fields: instr, PCsrc, BRwr, ALUsrc, ALUctr, MemWr, ResSrc, ImmSrc, mask, value, type, cycles, control_word
static const InstructionInfo control_table_data[] = {
    {"add", static_cast<uint8_t>(0), true, static_cast<uint8_t>(1), static_cast<uint8_t>(0), false, static_cast<uint8_t>(1), 0xFF, 0xFE00007F, 0x33, 'R', 4, 0x0F18},
    {"sub", static_cast<uint8_t>(0), true, static_cast<uint8_t>(1), static_cast<uint8_t>(1), false, static_cast<uint8_t>(1), 0xFF, 0xFE00007F, 0x40000033, 'R', 4, 0x2F18},
    {"and", static_cast<uint8_t>(0), true, static_cast<uint8_t>(1), static_cast<uint8_t>(2), false, static_cast<uint8_t>(1), 0xFF, 0xFE00007F, 0x7033, 'R', 4, 0x4F18},
    {"or", static_cast<uint8_t>(0), true, static_cast<uint8_t>(1), static_cast<uint8_t>(3), false, static_cast<uint8_t>(1), 0xFF, 0xFE00007F, 0x6033, 'R', 4, 0x6F18},
    {"addi", static_cast<uint8_t>(0), true, static_cast<uint8_t>(0), static_cast<uint8_t>(0), false, static_cast<uint8_t>(1), static_cast<uint8_t>(0), 0x707F, 0x13, 'I', 4, 0x0808},
    {"lw", static_cast<uint8_t>(0), true, static_cast<uint8_t>(0), static_cast<uint8_t>(0), false, static_cast<uint8_t>(0), static_cast<uint8_t>(0), 0x707F, 0x2003, 'I', 5, 0x0008},
    {"sw", static_cast<uint8_t>(0), false, static_cast<uint8_t>(0), static_cast<uint8_t>(0), true, 0xFF, static_cast<uint8_t>(1), 0x707F, 0x2023, 'S', 4, 0x1904},
    {"beq", static_cast<uint8_t>(1), false, static_cast<uint8_t>(1), static_cast<uint8_t>(1), false, 0xFF, static_cast<uint8_t>(2), 0x707F, 0x63, 'B', 3, 0x3A50},
    {"bne", static_cast<uint8_t>(1), false, static_cast<uint8_t>(1), static_cast<uint8_t>(1), false, 0xFF, static_cast<uint8_t>(2), 0x707F, 0x1063, 'B', 3, 0x3A50},
    {"jal", static_cast<uint8_t>(1), true, 0xFF, 0xFF, false, static_cast<uint8_t>(2), static_cast<uint8_t>(3), 0x7F, 0x6F, 'J', 4, 0xF358},
    {"sll", static_cast<uint8_t>(0), true, static_cast<uint8_t>(1), static_cast<uint8_t>(6), false, static_cast<uint8_t>(1), 0xFF, 0xFE00007F, 0x1033, 'R', 4, 0xCF18},
    {"ori", static_cast<uint8_t>(0), true, static_cast<uint8_t>(0), static_cast<uint8_t>(3), false, static_cast<uint8_t>(1), static_cast<uint8_t>(0), 0x707F, 0x6013, 'I', 4, 0x6808},
    {"lui", static_cast<uint8_t>(0), true, static_cast<uint8_t>(0), static_cast<uint8_t>(0), false, static_cast<uint8_t>(1), static_cast<uint8_t>(4), 0x7F, 0x37, 'U', 4, 0x0C08},
    {"jalr", static_cast<uint8_t>(2), true, static_cast<uint8_t>(0), static_cast<uint8_t>(0), false, static_cast<uint8_t>(2), static_cast<uint8_t>(0), 0x707F, 0x67, 'I', 4, 0x1088},
};

} // namespace riscv_sim
