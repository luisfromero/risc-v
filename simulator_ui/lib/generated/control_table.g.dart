// Generated file. DO NOT EDIT.
// This file is automatically generated by the 'generate_control_table.py' script.
// Any changes made to this file will be overwritten.

class ControlWordField {
  final String name;
  final int position;
  final int width;
  final String description;

  const ControlWordField({
    required this.name, required this.position, required this.width, required this.description,
  });
}

const Map<String, ControlWordField> controlWordLayout = {
  "MemWr": const ControlWordField(
    name: "MemWr",
    position: 2,
    width: 1,
    description: "Escritura en la memoria de datos",
  ),
  "BRwr": const ControlWordField(
    name: "BRwr",
    position: 3,
    width: 1,
    description: "Escritura en el banco de registros",
  ),
  "ALUsrc": const ControlWordField(
    name: "ALUsrc",
    position: 4,
    width: 1,
    description: "Selector de fuente para la ALU (Registro vs Inmediato)",
  ),
  "PCsrc": const ControlWordField(
    name: "PCsrc",
    position: 6,
    width: 2,
    description: "Selector de fuente para el PC (PC+4, ALU, etc.)",
  ),
  "ImmSrc": const ControlWordField(
    name: "ImmSrc",
    position: 8,
    width: 3,
    description: "Selector de fuente del inmediato",
  ),
  "ResSrc": const ControlWordField(
    name: "ResSrc",
    position: 11,
    width: 2,
    description: "Fuente del resultado para la escritura en registro (ALU vs Mem)",
  ),
  "ALUctr": const ControlWordField(
    name: "ALUctr",
    position: 13,
    width: 3,
    description: "Se√±al de control de la ALU",
  ),
};

class InstructionInfo {
  final String instr;
  final int pcSrc;
  final bool brWr;
  final int aluSrc;
  final int aluCtr;
  final bool memWr;
  final int resSrc;
  final int immSrc;
  final int mask;
  final int value;
  final String type;
  final int cycles;

  final int controlWord;

  const InstructionInfo({
    required this.instr, required this.pcSrc, required this.brWr, required this.aluSrc,
    required this.aluCtr, required this.memWr, required this.resSrc, required this.immSrc,
    required this.mask, required this.value, required this.type, required this.cycles, required this.controlWord,
  });
}

const List<InstructionInfo> controlTable = [
  InstructionInfo(
    instr: "add",
    pcSrc: 0,
    brWr: true,
    aluSrc: 1,
    aluCtr: 0,
    memWr: false,
    resSrc: 1,
    immSrc: -1,
    mask: 0xFE00007F,
    value: 0x33,
    type: 'R',
    cycles: 4,
    controlWord: 0x0F18,
  ),
  InstructionInfo(
    instr: "sub",
    pcSrc: 0,
    brWr: true,
    aluSrc: 1,
    aluCtr: 1,
    memWr: false,
    resSrc: 1,
    immSrc: -1,
    mask: 0xFE00007F,
    value: 0x40000033,
    type: 'R',
    cycles: 4,
    controlWord: 0x2F18,
  ),
  InstructionInfo(
    instr: "and",
    pcSrc: 0,
    brWr: true,
    aluSrc: 1,
    aluCtr: 2,
    memWr: false,
    resSrc: 1,
    immSrc: -1,
    mask: 0xFE00007F,
    value: 0x7033,
    type: 'R',
    cycles: 4,
    controlWord: 0x4F18,
  ),
  InstructionInfo(
    instr: "or",
    pcSrc: 0,
    brWr: true,
    aluSrc: 1,
    aluCtr: 3,
    memWr: false,
    resSrc: 1,
    immSrc: -1,
    mask: 0xFE00007F,
    value: 0x6033,
    type: 'R',
    cycles: 4,
    controlWord: 0x6F18,
  ),
  InstructionInfo(
    instr: "addi",
    pcSrc: 0,
    brWr: true,
    aluSrc: 0,
    aluCtr: 0,
    memWr: false,
    resSrc: 1,
    immSrc: 0,
    mask: 0x707F,
    value: 0x13,
    type: 'I',
    cycles: 4,
    controlWord: 0x0808,
  ),
  InstructionInfo(
    instr: "lw",
    pcSrc: 0,
    brWr: true,
    aluSrc: 0,
    aluCtr: 0,
    memWr: false,
    resSrc: 0,
    immSrc: 0,
    mask: 0x707F,
    value: 0x2003,
    type: 'I',
    cycles: 5,
    controlWord: 0x0008,
  ),
  InstructionInfo(
    instr: "sw",
    pcSrc: 0,
    brWr: false,
    aluSrc: 0,
    aluCtr: 0,
    memWr: true,
    resSrc: -1,
    immSrc: 1,
    mask: 0x707F,
    value: 0x2023,
    type: 'S',
    cycles: 4,
    controlWord: 0x1904,
  ),
  InstructionInfo(
    instr: "beq",
    pcSrc: 1,
    brWr: false,
    aluSrc: 1,
    aluCtr: 1,
    memWr: false,
    resSrc: -1,
    immSrc: 2,
    mask: 0x707F,
    value: 0x63,
    type: 'B',
    cycles: 3,
    controlWord: 0x3A50,
  ),
  InstructionInfo(
    instr: "bne",
    pcSrc: 1,
    brWr: false,
    aluSrc: 1,
    aluCtr: 1,
    memWr: false,
    resSrc: -1,
    immSrc: 2,
    mask: 0x707F,
    value: 0x1063,
    type: 'B',
    cycles: 3,
    controlWord: 0x3A50,
  ),
  InstructionInfo(
    instr: "jal",
    pcSrc: 1,
    brWr: true,
    aluSrc: -1,
    aluCtr: -1,
    memWr: false,
    resSrc: 2,
    immSrc: 3,
    mask: 0x7F,
    value: 0x6F,
    type: 'J',
    cycles: 4,
    controlWord: 0xF358,
  ),
  InstructionInfo(
    instr: "sll",
    pcSrc: 0,
    brWr: true,
    aluSrc: 1,
    aluCtr: 6,
    memWr: false,
    resSrc: 1,
    immSrc: -1,
    mask: 0xFE00007F,
    value: 0x1033,
    type: 'R',
    cycles: 4,
    controlWord: 0xCF18,
  ),
  InstructionInfo(
    instr: "ori",
    pcSrc: 0,
    brWr: true,
    aluSrc: 0,
    aluCtr: 3,
    memWr: false,
    resSrc: 1,
    immSrc: 0,
    mask: 0x707F,
    value: 0x6013,
    type: 'I',
    cycles: 4,
    controlWord: 0x6808,
  ),
  InstructionInfo(
    instr: "lui",
    pcSrc: 0,
    brWr: true,
    aluSrc: 0,
    aluCtr: 0,
    memWr: false,
    resSrc: 1,
    immSrc: 4,
    mask: 0x7F,
    value: 0x37,
    type: 'U',
    cycles: 4,
    controlWord: 0x0C08,
  ),
];
